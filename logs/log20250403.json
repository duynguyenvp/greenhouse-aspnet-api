{"Timestamp":"2025-04-03T00:16:23.4709826+07:00","Level":"Information","MessageTemplate":"Starting up"}
{"Timestamp":"2025-04-03T00:16:25.2286620+07:00","Level":"Debug","MessageTemplate":"Registered model binder providers, in the following order: {ModelBinderProviders}","Properties":{"ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory"}}
{"Timestamp":"2025-04-03T00:16:25.3573279+07:00","Level":"Debug","MessageTemplate":"Hosting starting","Properties":{"EventId":{"Id":1,"Name":"Starting"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:16:25.6404232+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:16:25.6500865+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:16:25.7618732+07:00","Level":"Information","MessageTemplate":"Now listening on: {address}","Properties":{"address":"http://[::]:5001","EventId":{"Id":14,"Name":"ListeningOnAddress"},"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:16:25.7622176+07:00","Level":"Debug","MessageTemplate":"Loaded hosting startup assembly {assemblyName}","Properties":{"assemblyName":"greenhouse-aspnet-api","EventId":{"Id":13,"Name":"HostingStartupAssemblyLoaded"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}}
{"Timestamp":"2025-04-03T00:16:25.7626761+07:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:16:25.7632471+07:00","Level":"Information","MessageTemplate":"Hosting environment: {EnvName}","Properties":{"EnvName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:16:25.7634848+07:00","Level":"Information","MessageTemplate":"Content root path: {ContentRoot}","Properties":{"ContentRoot":"D:\\IOT\\greenhouse-aspnet-api","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:16:25.7688800+07:00","Level":"Debug","MessageTemplate":"Hosting started","Properties":{"EventId":{"Id":2,"Name":"Started"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:17:32.3360214+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" accepted.","Properties":{"ConnectionId":"0HNBI190H0802","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:17:32.3480438+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" started.","Properties":{"ConnectionId":"0HNBI190H0802","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:17:32.4889966+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:32.5510909+07:00","Level":"Debug","MessageTemplate":"No candidates found for the request path '{Path}'","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"Path":"/swagger/v1/swagger.json","EventId":{"Id":1000,"Name":"CandidatesNotFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:32.5574492+07:00","Level":"Debug","MessageTemplate":"Request did not match any endpoints","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"EventId":{"Id":2,"Name":"MatchFailure"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:32.5800293+07:00","Level":"Warning","MessageTemplate":"Failed to determine the https port for redirect.","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"EventId":{"Id":3,"Name":"FailedToDeterminePort"},"SourceContext":"Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:32.6429295+07:00","Level":"Debug","MessageTemplate":"Executing API description provider '{ProviderName}' from assembly {ProviderAssembly} v{AssemblyVersion}.","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"ProviderName":"EndpointMetadataApiDescriptionProvider","ProviderAssembly":"Microsoft.AspNetCore.Mvc.ApiExplorer","AssemblyVersion":"9.0.0.0","EventId":{"Id":2,"Name":"ApiDescriptionProviderExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:32.6446585+07:00","Level":"Debug","MessageTemplate":"Executing API description provider '{ProviderName}' from assembly {ProviderAssembly} v{AssemblyVersion}.","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"ProviderName":"DefaultApiDescriptionProvider","ProviderAssembly":"Microsoft.AspNetCore.Mvc.ApiExplorer","AssemblyVersion":"9.0.0.0","EventId":{"Id":2,"Name":"ApiDescriptionProviderExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescriptionGroupCollectionProvider","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:33.2182005+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"ConnectionId":"0HNBI190H0802","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json"}}
{"Timestamp":"2025-04-03T00:17:33.2213103+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"f25e43660c69877233a43ff42cd554ae","SpanId":"d65a396366cd4374","Properties":{"ElapsedMilliseconds":736.7581,"StatusCode":200,"ContentType":"application/json;charset=utf-8","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/swagger/v1/swagger.json","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI190H0802:00000001","RequestPath":"/swagger/v1/swagger.json","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.0447251+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.0558466+07:00","Level":"Debug","MessageTemplate":"{CandidateCount} candidate(s) found for the request path '{Path}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"CandidateCount":1,"Path":"/api/WeatherForecast/test","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.0569740+07:00","Level":"Debug","MessageTemplate":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"Endpoint":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RoutePattern":"api/WeatherForecast/test","Path":"/api/WeatherForecast/test","EventId":{"Id":1005,"Name":"CandidateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.0581984+07:00","Level":"Debug","MessageTemplate":"Request matched endpoint '{EndpointName}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.0772403+07:00","Level":"Debug","MessageTemplate":"Static files was skipped as the request already matched an endpoint.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"EventId":{"Id":15,"Name":"EndpointMatched"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.0781204+07:00","Level":"Information","MessageTemplate":"Executing endpoint '{EndpointName}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1279254+07:00","Level":"Information","MessageTemplate":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"RouteData":"{action = \"GetTest\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[greenhouse_aspnet_api.db.Models.Device] GetTest()","Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":102,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1377466+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1380717+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1398368+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1401230+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1403898+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:42.1482013+07:00","Level":"Debug","MessageTemplate":"Executing controller factory for controller {Controller} ({AssemblyName})","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:43.2070668+07:00","Level":"Debug","MessageTemplate":"An 'IServiceProvider' was created for internal use by Entity Framework.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"EventId":{"Id":10401,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:43.2352772+07:00","Level":"Debug","MessageTemplate":"Executed controller factory for controller {Controller} ({AssemblyName})","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:44.1486993+07:00","Level":"Debug","MessageTemplate":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}:{providerVersion}' with options: {options}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"version":"9.0.1","contextType":"GreenhouseDbContext","provider":"Npgsql.EntityFrameworkCore.PostgreSQL","providerVersion":"9.0.4+fd2380957bee5cd86f336466af36b08c0163f1a5","options":"NoTracking MaxPoolSize=1024 ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:44.1886774+07:00","Level":"Debug","MessageTemplate":"Compiling query expression: {newline}'{queryExpression}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"newline":"\r\n","queryExpression":"DbSet<Device>()","EventId":{"Id":10111,"Name":"Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:44.6076519+07:00","Level":"Debug","MessageTemplate":"Generated query execution expression: {newline}'{plan}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"newline":"\r\n","plan":"queryContext => SingleQueryingEnumerable.Create<Device>(\r\n    relationalQueryContext: (RelationalQueryContext)queryContext, \r\n    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(\r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.SearchVector (NpgsqlTsVector) Required Index BeforeSave:Ignore AfterSave:Ignore ValueGenerated.OnAddOrUpdate, 5], [Property: Device.Status (DeviceStatus) Required, 6], [Property: Device.Type (DeviceType) Required, 7], [Property: Device.UpdatedAt (DateTime) Required, 8] }\r\n        SELECT d.Id, d.Code, d.CreatedAt, d.HasRelay, d.Name, d.SearchVector, d.Status, d.Type, d.UpdatedAt\r\n        FROM Devices AS d) | Resolver: c => new RelationalCommandCache(\r\n        c.Dependencies.MemoryCache, \r\n        c.RelationalDependencies.QuerySqlGeneratorFactory, \r\n        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, \r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.SearchVector (NpgsqlTsVector) Required Index BeforeSave:Ignore AfterSave:Ignore ValueGenerated.OnAddOrUpdate, 5], [Property: Device.Status (DeviceStatus) Required, 6], [Property: Device.Type (DeviceType) Required, 7], [Property: Device.UpdatedAt (DateTime) Required, 8] }\r\n        SELECT d.Id, d.Code, d.CreatedAt, d.HasRelay, d.Name, d.SearchVector, d.Status, d.Type, d.UpdatedAt\r\n        FROM Devices AS d, \r\n        False, \r\n        new HashSet<string>(\r\n            new string[]{ }, \r\n            StringComparer.Ordinal\r\n        )\r\n    )].GetRelationalCommandTemplate(parameters), \r\n    readerColumns: null, \r\n    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => \r\n    {\r\n        Device entity;\r\n        entity = \r\n        {\r\n            MaterializationContext materializationContext1;\r\n            IEntityType entityType1;\r\n            Device instance1;\r\n            materializationContext1 = new MaterializationContext(\r\n                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], \r\n                queryContext.Context\r\n            );\r\n            instance1 = default(Device);\r\n            (object)dataReader.GetInt32(0) != null ? \r\n            {\r\n                ISnapshot shadowSnapshot1;\r\n                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];\r\n                entityType1 = [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")];\r\n                instance1 = switch (entityType1)\r\n                {\r\n                    case [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]: \r\n                        {\r\n                            return \r\n                            {\r\n                                Device instance;\r\n                                instance = new Device();\r\n                                instance.<Id>k__BackingField = dataReader.GetInt32(0);\r\n                                instance.<Code>k__BackingField = dataReader.GetString(1);\r\n                                instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(2);\r\n                                instance.<HasRelay>k__BackingField = dataReader.GetBoolean(3);\r\n                                instance.<Name>k__BackingField = dataReader.GetString(4);\r\n                                instance.<SearchVector>k__BackingField = dataReader.GetFieldValue<NpgsqlTsVector>(5);\r\n                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<DeviceStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Status (DeviceStatus) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Status\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));\r\n                                instance.<Type>k__BackingField = Invoke(((EnumToNumberConverter<DeviceType, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Type (DeviceType) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Type\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(7));\r\n                                instance.<UpdatedAt>k__BackingField = dataReader.GetDateTime(8);\r\n                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(\r\n                                    context: materializationContext1.Context, \r\n                                    entity: instance, \r\n                                    queryTrackingBehavior: NoTracking, \r\n                                    structuralType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]) : default(void);\r\n                                return instance;\r\n                            }}\r\n                    default: \r\n                        default(Device)\r\n                }\r\n                ;\r\n                return instance1;\r\n            } : \r\n            {\r\n                object[] keyValues1;\r\n                keyValues1 = new object[]{ (object)dataReader.GetInt32(0) };\r\n                return ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(\r\n                    entityType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")], \r\n                    properties: [LIFTABLE Constant: List<RuntimeProperty> { Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd } | Resolver: c => c.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindPrimaryKey().Properties], \r\n                    keyValues: keyValues1);\r\n            };\r\n            return instance1;\r\n        };\r\n        return entity;\r\n    }, \r\n    contextType: greenhouse_aspnet_api.db.Models.GreenhouseDbContext, \r\n    standAloneStateManager: False, \r\n    detailedErrorsEnabled: False, \r\n    threadSafetyChecksEnabled: True)","EventId":{"Id":10107,"Name":"Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:44.6540098+07:00","Level":"Debug","MessageTemplate":"Creating DbConnection.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"EventId":{"Id":20005,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:44.7728234+07:00","Level":"Debug","MessageTemplate":"Created DbConnection. ({elapsed}ms).","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"elapsed":117,"EventId":{"Id":20006,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:44.7762538+07:00","Level":"Debug","MessageTemplate":"Opening connection to database '{database}' on server '{server}'.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20000,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.2217547+07:00","Level":"Debug","MessageTemplate":"Opened connection to database '{database}' on server '{server}'.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20001,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.2253537+07:00","Level":"Debug","MessageTemplate":"Creating DbCommand for '{executionType}'.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"executionType":"ExecuteReader","EventId":{"Id":20103,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.2355338+07:00","Level":"Debug","MessageTemplate":"Created DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"executionType":"ExecuteReader","elapsed":4,"EventId":{"Id":20104,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.2371398+07:00","Level":"Debug","MessageTemplate":"Initialized DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"executionType":"ExecuteReader","elapsed":12,"EventId":{"Id":20106,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.2453268+07:00","Level":"Debug","MessageTemplate":"Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.\"Id\", d.\"Code\", d.\"CreatedAt\", d.\"HasRelay\", d.\"Name\", d.\"SearchVector\", d.\"Status\", d.\"Type\", d.\"UpdatedAt\"\r\nFROM \"Devices\" AS d","EventId":{"Id":20100,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.3205045+07:00","Level":"Error","MessageTemplate":"Failed executing DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"elapsed":"69","parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.\"Id\", d.\"Code\", d.\"CreatedAt\", d.\"HasRelay\", d.\"Name\", d.\"SearchVector\", d.\"Status\", d.\"Type\", d.\"UpdatedAt\"\r\nFROM \"Devices\" AS d","EventId":{"Id":20102,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandError"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.3243570+07:00","Level":"Debug","MessageTemplate":"Closing connection to database '{database}' on server '{server}'.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20002,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.3398136+07:00","Level":"Debug","MessageTemplate":"Closed connection to database '{database}' on server '{server}' ({elapsed}ms).","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":7,"EventId":{"Id":20003,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:17:45.4255975+07:00","Level":"Error","MessageTemplate":"An exception occurred while iterating over the results of a query for context type '{contextType}'.{newline}{error}","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Exception":"Npgsql.PostgresException (0x80004005): 42P01: relation \"Devices\" does not exist\r\n\r\nPOSITION: 125\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42P01\r\n    MessageText: relation \"Devices\" does not exist\r\n    Position: 125\r\n    File: parse_relation.c\r\n    Line: 1392\r\n    Routine: parserOpenTable","Properties":{"contextType":"greenhouse_aspnet_api.db.Models.GreenhouseDbContext","newline":"\r\n","error":"Npgsql.PostgresException (0x80004005): 42P01: relation \"Devices\" does not exist\r\n\r\nPOSITION: 125\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42P01\r\n    MessageText: relation \"Devices\" does not exist\r\n    Position: 125\r\n    File: parse_relation.c\r\n    Line: 1392\r\n    Routine: parserOpenTable","EventId":{"Id":10100,"Name":"Microsoft.EntityFrameworkCore.Query.QueryIterationFailed"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"fddb0e35-bd6f-4623-bdda-b35c3beefb9b","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:18:05.9142131+07:00","Level":"Information","MessageTemplate":"Executed action {ActionName} in {ElapsedMilliseconds}ms","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","ElapsedMilliseconds":23769.0123,"EventId":{"Id":105,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:18:05.9208367+07:00","Level":"Information","MessageTemplate":"Executed endpoint '{EndpointName}'","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:18:05.9615643+07:00","Level":"Error","MessageTemplate":"Unhandled Exception Occurred","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Exception":"Npgsql.PostgresException (0x80004005): 42P01: relation \"Devices\" does not exist\r\n\r\nPOSITION: 125\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest() in d:\\IOT\\greenhouse-aspnet-api\\Controllers\\WeatherForecastController.cs:line 40\r\n   at lambda_method2(Closure, Object, Object[])\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware.Invoke(HttpContext context) in d:\\IOT\\greenhouse-aspnet-api\\middlewares\\GlobalExceptionMiddleware.cs:line 21\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42P01\r\n    MessageText: relation \"Devices\" does not exist\r\n    Position: 125\r\n    File: parse_relation.c\r\n    Line: 1392\r\n    Routine: parserOpenTable","Properties":{"SourceContext":"greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:18:06.0380807+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"ConnectionId":"0HNBI190H0802","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test"}}
{"Timestamp":"2025-04-03T00:18:06.0558567+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"3dbb8ad84320c453daed396f9b4f2bdf","SpanId":"e76940ef8bbc52ef","Properties":{"ElapsedMilliseconds":24010.9963,"StatusCode":500,"ContentType":"application/json","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI190H0802:00000002","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI190H0802"}}
{"Timestamp":"2025-04-03T00:22:05.3807097+07:00","Level":"Information","MessageTemplate":"Starting up"}
{"Timestamp":"2025-04-03T00:22:06.5458806+07:00","Level":"Debug","MessageTemplate":"Registered model binder providers, in the following order: {ModelBinderProviders}","Properties":{"ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory"}}
{"Timestamp":"2025-04-03T00:22:06.7818092+07:00","Level":"Debug","MessageTemplate":"Hosting starting","Properties":{"EventId":{"Id":1,"Name":"Starting"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:22:06.9882896+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:22:06.9939226+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:22:07.0624571+07:00","Level":"Information","MessageTemplate":"Now listening on: {address}","Properties":{"address":"http://[::]:5001","EventId":{"Id":14,"Name":"ListeningOnAddress"},"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:22:07.0628141+07:00","Level":"Debug","MessageTemplate":"Loaded hosting startup assembly {assemblyName}","Properties":{"assemblyName":"greenhouse-aspnet-api","EventId":{"Id":13,"Name":"HostingStartupAssemblyLoaded"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}}
{"Timestamp":"2025-04-03T00:22:07.0647329+07:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:22:07.0656401+07:00","Level":"Information","MessageTemplate":"Hosting environment: {EnvName}","Properties":{"EnvName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:22:07.0662288+07:00","Level":"Information","MessageTemplate":"Content root path: {ContentRoot}","Properties":{"ContentRoot":"D:\\IOT\\greenhouse-aspnet-api","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:22:07.0685243+07:00","Level":"Debug","MessageTemplate":"Hosting started","Properties":{"EventId":{"Id":2,"Name":"Started"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:22:11.6294185+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" accepted.","Properties":{"ConnectionId":"0HNBI1BJOJG09","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:22:11.6457232+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" started.","Properties":{"ConnectionId":"0HNBI1BJOJG09","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:22:11.7287564+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.8057779+07:00","Level":"Debug","MessageTemplate":"{CandidateCount} candidate(s) found for the request path '{Path}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"CandidateCount":1,"Path":"/api/WeatherForecast/test","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.8206324+07:00","Level":"Debug","MessageTemplate":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"Endpoint":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RoutePattern":"api/WeatherForecast/test","Path":"/api/WeatherForecast/test","EventId":{"Id":1005,"Name":"CandidateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.8220866+07:00","Level":"Debug","MessageTemplate":"Request matched endpoint '{EndpointName}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.8459994+07:00","Level":"Warning","MessageTemplate":"Failed to determine the https port for redirect.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EventId":{"Id":3,"Name":"FailedToDeterminePort"},"SourceContext":"Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9156792+07:00","Level":"Debug","MessageTemplate":"Static files was skipped as the request already matched an endpoint.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EventId":{"Id":15,"Name":"EndpointMatched"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9174302+07:00","Level":"Information","MessageTemplate":"Executing endpoint '{EndpointName}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9609281+07:00","Level":"Information","MessageTemplate":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"RouteData":"{action = \"GetTest\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[greenhouse_aspnet_api.db.Models.Device] GetTest()","Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":102,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9677282+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9694927+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9739261+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9749144+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9760600+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:11.9814483+07:00","Level":"Debug","MessageTemplate":"Executing controller factory for controller {Controller} ({AssemblyName})","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:12.3193157+07:00","Level":"Debug","MessageTemplate":"An 'IServiceProvider' was created for internal use by Entity Framework.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EventId":{"Id":10401,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:12.3610380+07:00","Level":"Debug","MessageTemplate":"Executed controller factory for controller {Controller} ({AssemblyName})","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:13.4059955+07:00","Level":"Debug","MessageTemplate":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}:{providerVersion}' with options: {options}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"version":"9.0.1","contextType":"GreenhouseDbContext","provider":"Npgsql.EntityFrameworkCore.PostgreSQL","providerVersion":"9.0.4+fd2380957bee5cd86f336466af36b08c0163f1a5","options":"NoTracking MaxPoolSize=1024 ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:13.4484179+07:00","Level":"Debug","MessageTemplate":"Compiling query expression: {newline}'{queryExpression}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"newline":"\r\n","queryExpression":"DbSet<Device>()","EventId":{"Id":10111,"Name":"Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:13.9738372+07:00","Level":"Debug","MessageTemplate":"Generated query execution expression: {newline}'{plan}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"newline":"\r\n","plan":"queryContext => SingleQueryingEnumerable.Create<Device>(\r\n    relationalQueryContext: (RelationalQueryContext)queryContext, \r\n    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(\r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.SearchVector (NpgsqlTsVector) Required Index BeforeSave:Ignore AfterSave:Ignore ValueGenerated.OnAddOrUpdate, 5], [Property: Device.Status (DeviceStatus) Required, 6], [Property: Device.Type (DeviceType) Required, 7], [Property: Device.UpdatedAt (DateTime) Required, 8] }\r\n        SELECT d.Id, d.Code, d.CreatedAt, d.HasRelay, d.Name, d.SearchVector, d.Status, d.Type, d.UpdatedAt\r\n        FROM device AS d) | Resolver: c => new RelationalCommandCache(\r\n        c.Dependencies.MemoryCache, \r\n        c.RelationalDependencies.QuerySqlGeneratorFactory, \r\n        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, \r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.SearchVector (NpgsqlTsVector) Required Index BeforeSave:Ignore AfterSave:Ignore ValueGenerated.OnAddOrUpdate, 5], [Property: Device.Status (DeviceStatus) Required, 6], [Property: Device.Type (DeviceType) Required, 7], [Property: Device.UpdatedAt (DateTime) Required, 8] }\r\n        SELECT d.Id, d.Code, d.CreatedAt, d.HasRelay, d.Name, d.SearchVector, d.Status, d.Type, d.UpdatedAt\r\n        FROM device AS d, \r\n        False, \r\n        new HashSet<string>(\r\n            new string[]{ }, \r\n            StringComparer.Ordinal\r\n        )\r\n    )].GetRelationalCommandTemplate(parameters), \r\n    readerColumns: null, \r\n    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => \r\n    {\r\n        Device entity;\r\n        entity = \r\n        {\r\n            MaterializationContext materializationContext1;\r\n            IEntityType entityType1;\r\n            Device instance1;\r\n            materializationContext1 = new MaterializationContext(\r\n                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], \r\n                queryContext.Context\r\n            );\r\n            instance1 = default(Device);\r\n            (object)dataReader.GetInt32(0) != null ? \r\n            {\r\n                ISnapshot shadowSnapshot1;\r\n                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];\r\n                entityType1 = [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")];\r\n                instance1 = switch (entityType1)\r\n                {\r\n                    case [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]: \r\n                        {\r\n                            return \r\n                            {\r\n                                Device instance;\r\n                                instance = new Device();\r\n                                instance.<Id>k__BackingField = dataReader.GetInt32(0);\r\n                                instance.<Code>k__BackingField = dataReader.GetString(1);\r\n                                instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(2);\r\n                                instance.<HasRelay>k__BackingField = dataReader.GetBoolean(3);\r\n                                instance.<Name>k__BackingField = dataReader.GetString(4);\r\n                                instance.<SearchVector>k__BackingField = dataReader.GetFieldValue<NpgsqlTsVector>(5);\r\n                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<DeviceStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Status (DeviceStatus) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Status\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));\r\n                                instance.<Type>k__BackingField = Invoke(((EnumToNumberConverter<DeviceType, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Type (DeviceType) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Type\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(7));\r\n                                instance.<UpdatedAt>k__BackingField = dataReader.GetDateTime(8);\r\n                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(\r\n                                    context: materializationContext1.Context, \r\n                                    entity: instance, \r\n                                    queryTrackingBehavior: NoTracking, \r\n                                    structuralType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]) : default(void);\r\n                                return instance;\r\n                            }}\r\n                    default: \r\n                        default(Device)\r\n                }\r\n                ;\r\n                return instance1;\r\n            } : \r\n            {\r\n                object[] keyValues1;\r\n                keyValues1 = new object[]{ (object)dataReader.GetInt32(0) };\r\n                return ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(\r\n                    entityType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")], \r\n                    properties: [LIFTABLE Constant: List<RuntimeProperty> { Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd } | Resolver: c => c.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindPrimaryKey().Properties], \r\n                    keyValues: keyValues1);\r\n            };\r\n            return instance1;\r\n        };\r\n        return entity;\r\n    }, \r\n    contextType: greenhouse_aspnet_api.db.Models.GreenhouseDbContext, \r\n    standAloneStateManager: False, \r\n    detailedErrorsEnabled: False, \r\n    threadSafetyChecksEnabled: True)","EventId":{"Id":10107,"Name":"Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.0265123+07:00","Level":"Debug","MessageTemplate":"Creating DbConnection.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EventId":{"Id":20005,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.0967984+07:00","Level":"Debug","MessageTemplate":"Created DbConnection. ({elapsed}ms).","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"elapsed":65,"EventId":{"Id":20006,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.1018327+07:00","Level":"Debug","MessageTemplate":"Opening connection to database '{database}' on server '{server}'.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20000,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.2811185+07:00","Level":"Debug","MessageTemplate":"Opened connection to database '{database}' on server '{server}'.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20001,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.2850039+07:00","Level":"Debug","MessageTemplate":"Creating DbCommand for '{executionType}'.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"executionType":"ExecuteReader","EventId":{"Id":20103,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.2943740+07:00","Level":"Debug","MessageTemplate":"Created DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"executionType":"ExecuteReader","elapsed":5,"EventId":{"Id":20104,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.2961863+07:00","Level":"Debug","MessageTemplate":"Initialized DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"executionType":"ExecuteReader","elapsed":11,"EventId":{"Id":20106,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.3051104+07:00","Level":"Debug","MessageTemplate":"Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.\"Id\", d.\"Code\", d.\"CreatedAt\", d.\"HasRelay\", d.\"Name\", d.\"SearchVector\", d.\"Status\", d.\"Type\", d.\"UpdatedAt\"\r\nFROM device AS d","EventId":{"Id":20100,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.3751255+07:00","Level":"Error","MessageTemplate":"Failed executing DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"elapsed":"51","parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.\"Id\", d.\"Code\", d.\"CreatedAt\", d.\"HasRelay\", d.\"Name\", d.\"SearchVector\", d.\"Status\", d.\"Type\", d.\"UpdatedAt\"\r\nFROM device AS d","EventId":{"Id":20102,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandError"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.3781809+07:00","Level":"Debug","MessageTemplate":"Closing connection to database '{database}' on server '{server}'.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20002,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.3907325+07:00","Level":"Debug","MessageTemplate":"Closed connection to database '{database}' on server '{server}' ({elapsed}ms).","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":7,"EventId":{"Id":20003,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:14.4271211+07:00","Level":"Error","MessageTemplate":"An exception occurred while iterating over the results of a query for context type '{contextType}'.{newline}{error}","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Exception":"Npgsql.PostgresException (0x80004005): 42703: column d.Id does not exist\r\n\r\nPOSITION: 8\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42703\r\n    MessageText: column d.Id does not exist\r\n    Hint: Perhaps you meant to reference the column \"d.id\".\r\n    Position: 8\r\n    File: parse_relation.c\r\n    Line: 3665\r\n    Routine: errorMissingColumn","Properties":{"contextType":"greenhouse_aspnet_api.db.Models.GreenhouseDbContext","newline":"\r\n","error":"Npgsql.PostgresException (0x80004005): 42703: column d.Id does not exist\r\n\r\nPOSITION: 8\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42703\r\n    MessageText: column d.Id does not exist\r\n    Hint: Perhaps you meant to reference the column \"d.id\".\r\n    Position: 8\r\n    File: parse_relation.c\r\n    Line: 3665\r\n    Routine: errorMissingColumn","EventId":{"Id":10100,"Name":"Microsoft.EntityFrameworkCore.Query.QueryIterationFailed"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"f9298d62-9f4d-44dd-b911-d3a745549140","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:29.4132888+07:00","Level":"Information","MessageTemplate":"Executed action {ActionName} in {ElapsedMilliseconds}ms","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","ElapsedMilliseconds":17431.996,"EventId":{"Id":105,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:29.4205821+07:00","Level":"Information","MessageTemplate":"Executed endpoint '{EndpointName}'","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:29.4621546+07:00","Level":"Error","MessageTemplate":"Unhandled Exception Occurred","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Exception":"Npgsql.PostgresException (0x80004005): 42703: column d.Id does not exist\r\n\r\nPOSITION: 8\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest() in d:\\IOT\\greenhouse-aspnet-api\\Controllers\\WeatherForecastController.cs:line 40\r\n   at lambda_method2(Closure, Object, Object[])\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware.Invoke(HttpContext context) in d:\\IOT\\greenhouse-aspnet-api\\middlewares\\GlobalExceptionMiddleware.cs:line 21\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42703\r\n    MessageText: column d.Id does not exist\r\n    Hint: Perhaps you meant to reference the column \"d.id\".\r\n    Position: 8\r\n    File: parse_relation.c\r\n    Line: 3665\r\n    Routine: errorMissingColumn","Properties":{"SourceContext":"greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:22:29.5388370+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"ConnectionId":"0HNBI1BJOJG09","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test"}}
{"Timestamp":"2025-04-03T00:22:29.5556971+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"96b4a0ffe0f1792bf032686de3a4b49a","SpanId":"4e02d75aa6d0a17b","Properties":{"ElapsedMilliseconds":17835.3755,"StatusCode":500,"ContentType":"application/json","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1BJOJG09:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1BJOJG09"}}
{"Timestamp":"2025-04-03T00:27:48.8770946+07:00","Level":"Information","MessageTemplate":"Starting up"}
{"Timestamp":"2025-04-03T00:27:49.8837178+07:00","Level":"Debug","MessageTemplate":"Registered model binder providers, in the following order: {ModelBinderProviders}","Properties":{"ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory"}}
{"Timestamp":"2025-04-03T00:27:50.0337293+07:00","Level":"Debug","MessageTemplate":"Hosting starting","Properties":{"EventId":{"Id":1,"Name":"Starting"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:27:50.2875672+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:27:50.2929671+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:27:50.3487946+07:00","Level":"Information","MessageTemplate":"Now listening on: {address}","Properties":{"address":"http://[::]:5001","EventId":{"Id":14,"Name":"ListeningOnAddress"},"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:27:50.3490720+07:00","Level":"Debug","MessageTemplate":"Loaded hosting startup assembly {assemblyName}","Properties":{"assemblyName":"greenhouse-aspnet-api","EventId":{"Id":13,"Name":"HostingStartupAssemblyLoaded"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}}
{"Timestamp":"2025-04-03T00:27:50.3497715+07:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:27:50.3503659+07:00","Level":"Information","MessageTemplate":"Hosting environment: {EnvName}","Properties":{"EnvName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:27:50.3505635+07:00","Level":"Information","MessageTemplate":"Content root path: {ContentRoot}","Properties":{"ContentRoot":"D:\\IOT\\greenhouse-aspnet-api","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:27:50.3507909+07:00","Level":"Debug","MessageTemplate":"Hosting started","Properties":{"EventId":{"Id":2,"Name":"Started"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:27:54.6962501+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" accepted.","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:27:54.7309170+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" started.","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:27:54.8054773+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.8823562+07:00","Level":"Debug","MessageTemplate":"{CandidateCount} candidate(s) found for the request path '{Path}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"CandidateCount":1,"Path":"/api/WeatherForecast/test","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.8885971+07:00","Level":"Debug","MessageTemplate":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"Endpoint":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RoutePattern":"api/WeatherForecast/test","Path":"/api/WeatherForecast/test","EventId":{"Id":1005,"Name":"CandidateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.8902279+07:00","Level":"Debug","MessageTemplate":"Request matched endpoint '{EndpointName}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.9088854+07:00","Level":"Warning","MessageTemplate":"Failed to determine the https port for redirect.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EventId":{"Id":3,"Name":"FailedToDeterminePort"},"SourceContext":"Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.9690742+07:00","Level":"Debug","MessageTemplate":"Static files was skipped as the request already matched an endpoint.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EventId":{"Id":15,"Name":"EndpointMatched"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.9707260+07:00","Level":"Information","MessageTemplate":"Executing endpoint '{EndpointName}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:54.9988494+07:00","Level":"Information","MessageTemplate":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"RouteData":"{action = \"GetTest\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[greenhouse_aspnet_api.db.Models.Device] GetTest()","Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":102,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.0036283+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.0047640+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.0080935+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.0088376+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.0101791+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.0128030+07:00","Level":"Debug","MessageTemplate":"Executing controller factory for controller {Controller} ({AssemblyName})","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.2703521+07:00","Level":"Debug","MessageTemplate":"An 'IServiceProvider' was created for internal use by Entity Framework.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EventId":{"Id":10401,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:55.3198507+07:00","Level":"Debug","MessageTemplate":"Executed controller factory for controller {Controller} ({AssemblyName})","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:56.5383153+07:00","Level":"Debug","MessageTemplate":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}:{providerVersion}' with options: {options}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"version":"9.0.1","contextType":"GreenhouseDbContext","provider":"Npgsql.EntityFrameworkCore.PostgreSQL","providerVersion":"9.0.4+fd2380957bee5cd86f336466af36b08c0163f1a5","options":"NoTracking MaxPoolSize=1024 ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:56.5762269+07:00","Level":"Debug","MessageTemplate":"Compiling query expression: {newline}'{queryExpression}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"newline":"\r\n","queryExpression":"DbSet<Device>()","EventId":{"Id":10111,"Name":"Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.0149004+07:00","Level":"Debug","MessageTemplate":"Generated query execution expression: {newline}'{plan}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"newline":"\r\n","plan":"queryContext => SingleQueryingEnumerable.Create<Device>(\r\n    relationalQueryContext: (RelationalQueryContext)queryContext, \r\n    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(\r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.Status (DeviceStatus) Required, 5], [Property: Device.Type (DeviceType) Required, 6], [Property: Device.UpdatedAt (DateTime) Required, 7] }\r\n        SELECT d.Id, d.Code, d.CreatedAt, d.HasRelay, d.Name, d.Status, d.Type, d.UpdatedAt\r\n        FROM device AS d) | Resolver: c => new RelationalCommandCache(\r\n        c.Dependencies.MemoryCache, \r\n        c.RelationalDependencies.QuerySqlGeneratorFactory, \r\n        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, \r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.Status (DeviceStatus) Required, 5], [Property: Device.Type (DeviceType) Required, 6], [Property: Device.UpdatedAt (DateTime) Required, 7] }\r\n        SELECT d.Id, d.Code, d.CreatedAt, d.HasRelay, d.Name, d.Status, d.Type, d.UpdatedAt\r\n        FROM device AS d, \r\n        False, \r\n        new HashSet<string>(\r\n            new string[]{ }, \r\n            StringComparer.Ordinal\r\n        )\r\n    )].GetRelationalCommandTemplate(parameters), \r\n    readerColumns: null, \r\n    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => \r\n    {\r\n        Device entity;\r\n        entity = \r\n        {\r\n            MaterializationContext materializationContext1;\r\n            IEntityType entityType1;\r\n            Device instance1;\r\n            materializationContext1 = new MaterializationContext(\r\n                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], \r\n                queryContext.Context\r\n            );\r\n            instance1 = default(Device);\r\n            (object)dataReader.GetInt32(0) != null ? \r\n            {\r\n                ISnapshot shadowSnapshot1;\r\n                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];\r\n                entityType1 = [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")];\r\n                instance1 = switch (entityType1)\r\n                {\r\n                    case [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]: \r\n                        {\r\n                            return \r\n                            {\r\n                                Device instance;\r\n                                instance = new Device();\r\n                                instance.<Id>k__BackingField = dataReader.GetInt32(0);\r\n                                instance.<Code>k__BackingField = dataReader.GetString(1);\r\n                                instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(2);\r\n                                instance.<HasRelay>k__BackingField = dataReader.GetBoolean(3);\r\n                                instance.<Name>k__BackingField = dataReader.GetString(4);\r\n                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<DeviceStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Status (DeviceStatus) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Status\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(5));\r\n                                instance.<Type>k__BackingField = Invoke(((EnumToNumberConverter<DeviceType, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Type (DeviceType) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Type\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));\r\n                                instance.<UpdatedAt>k__BackingField = dataReader.GetDateTime(7);\r\n                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(\r\n                                    context: materializationContext1.Context, \r\n                                    entity: instance, \r\n                                    queryTrackingBehavior: NoTracking, \r\n                                    structuralType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]) : default(void);\r\n                                return instance;\r\n                            }}\r\n                    default: \r\n                        default(Device)\r\n                }\r\n                ;\r\n                return instance1;\r\n            } : \r\n            {\r\n                object[] keyValues1;\r\n                keyValues1 = new object[]{ (object)dataReader.GetInt32(0) };\r\n                return ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(\r\n                    entityType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")], \r\n                    properties: [LIFTABLE Constant: List<RuntimeProperty> { Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd } | Resolver: c => c.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindPrimaryKey().Properties], \r\n                    keyValues: keyValues1);\r\n            };\r\n            return instance1;\r\n        };\r\n        return entity;\r\n    }, \r\n    contextType: greenhouse_aspnet_api.db.Models.GreenhouseDbContext, \r\n    standAloneStateManager: False, \r\n    detailedErrorsEnabled: False, \r\n    threadSafetyChecksEnabled: True)","EventId":{"Id":10107,"Name":"Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.0561667+07:00","Level":"Debug","MessageTemplate":"Creating DbConnection.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EventId":{"Id":20005,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.1060112+07:00","Level":"Debug","MessageTemplate":"Created DbConnection. ({elapsed}ms).","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"elapsed":46,"EventId":{"Id":20006,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.1093855+07:00","Level":"Debug","MessageTemplate":"Opening connection to database '{database}' on server '{server}'.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20000,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.2755157+07:00","Level":"Debug","MessageTemplate":"Opened connection to database '{database}' on server '{server}'.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20001,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.2800181+07:00","Level":"Debug","MessageTemplate":"Creating DbCommand for '{executionType}'.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"executionType":"ExecuteReader","EventId":{"Id":20103,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.2893005+07:00","Level":"Debug","MessageTemplate":"Created DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"executionType":"ExecuteReader","elapsed":5,"EventId":{"Id":20104,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.2916699+07:00","Level":"Debug","MessageTemplate":"Initialized DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"executionType":"ExecuteReader","elapsed":12,"EventId":{"Id":20106,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.3014073+07:00","Level":"Debug","MessageTemplate":"Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.\"Id\", d.\"Code\", d.\"CreatedAt\", d.\"HasRelay\", d.\"Name\", d.\"Status\", d.\"Type\", d.\"UpdatedAt\"\r\nFROM device AS d","EventId":{"Id":20100,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.3718550+07:00","Level":"Error","MessageTemplate":"Failed executing DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"elapsed":"55","parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.\"Id\", d.\"Code\", d.\"CreatedAt\", d.\"HasRelay\", d.\"Name\", d.\"Status\", d.\"Type\", d.\"UpdatedAt\"\r\nFROM device AS d","EventId":{"Id":20102,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandError"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.3750661+07:00","Level":"Debug","MessageTemplate":"Closing connection to database '{database}' on server '{server}'.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20002,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.3855883+07:00","Level":"Debug","MessageTemplate":"Closed connection to database '{database}' on server '{server}' ({elapsed}ms).","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":6,"EventId":{"Id":20003,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:27:57.4208326+07:00","Level":"Error","MessageTemplate":"An exception occurred while iterating over the results of a query for context type '{contextType}'.{newline}{error}","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Exception":"Npgsql.PostgresException (0x80004005): 42703: column d.Id does not exist\r\n\r\nPOSITION: 8\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42703\r\n    MessageText: column d.Id does not exist\r\n    Hint: Perhaps you meant to reference the column \"d.id\".\r\n    Position: 8\r\n    File: parse_relation.c\r\n    Line: 3665\r\n    Routine: errorMissingColumn","Properties":{"contextType":"greenhouse_aspnet_api.db.Models.GreenhouseDbContext","newline":"\r\n","error":"Npgsql.PostgresException (0x80004005): 42703: column d.Id does not exist\r\n\r\nPOSITION: 8\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42703\r\n    MessageText: column d.Id does not exist\r\n    Hint: Perhaps you meant to reference the column \"d.id\".\r\n    Position: 8\r\n    File: parse_relation.c\r\n    Line: 3665\r\n    Routine: errorMissingColumn","EventId":{"Id":10100,"Name":"Microsoft.EntityFrameworkCore.Query.QueryIterationFailed"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"12c2eca9-9d21-43dd-afc7-6688492efddd","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:28:07.8216504+07:00","Level":"Information","MessageTemplate":"Executed action {ActionName} in {ElapsedMilliseconds}ms","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","ElapsedMilliseconds":12807.1824,"EventId":{"Id":105,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:28:07.8288047+07:00","Level":"Information","MessageTemplate":"Executed endpoint '{EndpointName}'","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:28:07.8742365+07:00","Level":"Error","MessageTemplate":"Unhandled Exception Occurred","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Exception":"Npgsql.PostgresException (0x80004005): 42703: column d.Id does not exist\r\n\r\nPOSITION: 8\r\n   at Npgsql.Internal.NpgsqlConnector.ReadMessageLong(Boolean async, DataRowLoadingMode dataRowLoadingMode, Boolean readingNotifications, Boolean isReadingPrependedMessage)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource<TResult>.GetResult(Int16 token)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult(Boolean async, Boolean isConsuming, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlDataReader.NextResult()\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(Boolean async, CommandBehavior behavior, CancellationToken cancellationToken)\r\n   at Npgsql.NpgsqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior)\r\n   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.<>c.<MoveNext>b__21_0(DbContext _, Enumerator enumerator)\r\n   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest() in d:\\IOT\\greenhouse-aspnet-api\\Controllers\\WeatherForecastController.cs:line 40\r\n   at lambda_method2(Closure, Object, Object[])\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware.Invoke(HttpContext context) in d:\\IOT\\greenhouse-aspnet-api\\middlewares\\GlobalExceptionMiddleware.cs:line 21\r\n  Exception data:\r\n    Severity: ERROR\r\n    SqlState: 42703\r\n    MessageText: column d.Id does not exist\r\n    Hint: Perhaps you meant to reference the column \"d.id\".\r\n    Position: 8\r\n    File: parse_relation.c\r\n    Line: 3665\r\n    Routine: errorMissingColumn","Properties":{"SourceContext":"greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:28:07.9544010+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test"}}
{"Timestamp":"2025-04-03T00:28:07.9769768+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"71d768f3a6871350d41f34779796a94d","SpanId":"bbbb81150c12d747","Properties":{"ElapsedMilliseconds":13176.3363,"StatusCode":500,"ContentType":"application/json","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1EQ0B7SM:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1EQ0B7SM"}}
{"Timestamp":"2025-04-03T00:33:02.7207164+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" received FIN.","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","EventId":{"Id":6,"Name":"ConnectionReadFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}}
{"Timestamp":"2025-04-03T00:33:02.7495046+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" sending FIN because: \"{Reason}\"","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","Reason":"The Socket transport's send loop completed gracefully.","EventId":{"Id":7,"Name":"ConnectionWriteFin"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets"}}
{"Timestamp":"2025-04-03T00:33:02.7505922+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" disconnecting.","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","EventId":{"Id":10,"Name":"ConnectionDisconnect"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:33:02.7589665+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" stopped.","Properties":{"ConnectionId":"0HNBI1EQ0B7SM","EventId":{"Id":2,"Name":"ConnectionStop"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:34:53.7958317+07:00","Level":"Information","MessageTemplate":"Starting up"}
{"Timestamp":"2025-04-03T00:34:54.6358171+07:00","Level":"Debug","MessageTemplate":"Registered model binder providers, in the following order: {ModelBinderProviders}","Properties":{"ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory"}}
{"Timestamp":"2025-04-03T00:34:54.7405171+07:00","Level":"Debug","MessageTemplate":"Hosting starting","Properties":{"EventId":{"Id":1,"Name":"Starting"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:34:54.8690216+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:34:54.8726673+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:34:54.9184199+07:00","Level":"Information","MessageTemplate":"Now listening on: {address}","Properties":{"address":"http://[::]:5001","EventId":{"Id":14,"Name":"ListeningOnAddress"},"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:34:54.9186457+07:00","Level":"Debug","MessageTemplate":"Loaded hosting startup assembly {assemblyName}","Properties":{"assemblyName":"greenhouse-aspnet-api","EventId":{"Id":13,"Name":"HostingStartupAssemblyLoaded"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}}
{"Timestamp":"2025-04-03T00:34:54.9190539+07:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:34:54.9195064+07:00","Level":"Information","MessageTemplate":"Hosting environment: {EnvName}","Properties":{"EnvName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:34:54.9196471+07:00","Level":"Information","MessageTemplate":"Content root path: {ContentRoot}","Properties":{"ContentRoot":"D:\\IOT\\greenhouse-aspnet-api","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:34:54.9198524+07:00","Level":"Debug","MessageTemplate":"Hosting started","Properties":{"EventId":{"Id":2,"Name":"Started"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:35:11.3995825+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" accepted.","Properties":{"ConnectionId":"0HNBI1IS523NU","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:35:11.4113974+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" started.","Properties":{"ConnectionId":"0HNBI1IS523NU","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:35:11.4699129+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.5679902+07:00","Level":"Debug","MessageTemplate":"{CandidateCount} candidate(s) found for the request path '{Path}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"CandidateCount":1,"Path":"/api/WeatherForecast/test","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.5745131+07:00","Level":"Debug","MessageTemplate":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"Endpoint":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RoutePattern":"api/WeatherForecast/test","Path":"/api/WeatherForecast/test","EventId":{"Id":1005,"Name":"CandidateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.5764235+07:00","Level":"Debug","MessageTemplate":"Request matched endpoint '{EndpointName}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.5913751+07:00","Level":"Warning","MessageTemplate":"Failed to determine the https port for redirect.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EventId":{"Id":3,"Name":"FailedToDeterminePort"},"SourceContext":"Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.6496063+07:00","Level":"Debug","MessageTemplate":"Static files was skipped as the request already matched an endpoint.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EventId":{"Id":15,"Name":"EndpointMatched"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.6513144+07:00","Level":"Information","MessageTemplate":"Executing endpoint '{EndpointName}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.6890188+07:00","Level":"Information","MessageTemplate":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"RouteData":"{action = \"GetTest\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[greenhouse_aspnet_api.db.Models.Device] GetTest()","Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":102,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.6990016+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.7004002+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.7044550+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.7049991+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.7053910+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:11.7145640+07:00","Level":"Debug","MessageTemplate":"Executing controller factory for controller {Controller} ({AssemblyName})","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:12.1181292+07:00","Level":"Debug","MessageTemplate":"An 'IServiceProvider' was created for internal use by Entity Framework.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EventId":{"Id":10401,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:12.1524052+07:00","Level":"Debug","MessageTemplate":"Executed controller factory for controller {Controller} ({AssemblyName})","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:13.1322455+07:00","Level":"Debug","MessageTemplate":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}:{providerVersion}' with options: {options}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"version":"9.0.1","contextType":"GreenhouseDbContext","provider":"Npgsql.EntityFrameworkCore.PostgreSQL","providerVersion":"9.0.4+fd2380957bee5cd86f336466af36b08c0163f1a5","options":"NoTracking MaxPoolSize=1024 ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:13.1629260+07:00","Level":"Debug","MessageTemplate":"Compiling query expression: {newline}'{queryExpression}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"newline":"\r\n","queryExpression":"DbSet<Device>()","EventId":{"Id":10111,"Name":"Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:13.5993683+07:00","Level":"Debug","MessageTemplate":"Generated query execution expression: {newline}'{plan}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"newline":"\r\n","plan":"queryContext => SingleQueryingEnumerable.Create<Device>(\r\n    relationalQueryContext: (RelationalQueryContext)queryContext, \r\n    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(\r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.Status (DeviceStatus) Required, 5], [Property: Device.Type (DeviceType) Required, 6], [Property: Device.UpdatedAt (DateTime) Required, 7] }\r\n        SELECT d.id, d.code, d.createdAt, d.hasRelay, d.name, d.status, d.type, d.updatedAt\r\n        FROM device AS d) | Resolver: c => new RelationalCommandCache(\r\n        c.Dependencies.MemoryCache, \r\n        c.RelationalDependencies.QuerySqlGeneratorFactory, \r\n        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, \r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.Status (DeviceStatus) Required, 5], [Property: Device.Type (DeviceType) Required, 6], [Property: Device.UpdatedAt (DateTime) Required, 7] }\r\n        SELECT d.id, d.code, d.createdAt, d.hasRelay, d.name, d.status, d.type, d.updatedAt\r\n        FROM device AS d, \r\n        False, \r\n        new HashSet<string>(\r\n            new string[]{ }, \r\n            StringComparer.Ordinal\r\n        )\r\n    )].GetRelationalCommandTemplate(parameters), \r\n    readerColumns: null, \r\n    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => \r\n    {\r\n        Device entity;\r\n        entity = \r\n        {\r\n            MaterializationContext materializationContext1;\r\n            IEntityType entityType1;\r\n            Device instance1;\r\n            materializationContext1 = new MaterializationContext(\r\n                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], \r\n                queryContext.Context\r\n            );\r\n            instance1 = default(Device);\r\n            (object)dataReader.GetInt32(0) != null ? \r\n            {\r\n                ISnapshot shadowSnapshot1;\r\n                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];\r\n                entityType1 = [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")];\r\n                instance1 = switch (entityType1)\r\n                {\r\n                    case [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]: \r\n                        {\r\n                            return \r\n                            {\r\n                                Device instance;\r\n                                instance = new Device();\r\n                                instance.<Id>k__BackingField = dataReader.GetInt32(0);\r\n                                instance.<Code>k__BackingField = dataReader.GetString(1);\r\n                                instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(2);\r\n                                instance.<HasRelay>k__BackingField = dataReader.GetBoolean(3);\r\n                                instance.<Name>k__BackingField = dataReader.GetString(4);\r\n                                instance.<Status>k__BackingField = Invoke(((EnumToNumberConverter<DeviceStatus, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Status (DeviceStatus) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Status\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(5));\r\n                                instance.<Type>k__BackingField = Invoke(((EnumToNumberConverter<DeviceType, int>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Type (DeviceType) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Type\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetInt32(6));\r\n                                instance.<UpdatedAt>k__BackingField = dataReader.GetDateTime(7);\r\n                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(\r\n                                    context: materializationContext1.Context, \r\n                                    entity: instance, \r\n                                    queryTrackingBehavior: NoTracking, \r\n                                    structuralType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]) : default(void);\r\n                                return instance;\r\n                            }}\r\n                    default: \r\n                        default(Device)\r\n                }\r\n                ;\r\n                return instance1;\r\n            } : \r\n            {\r\n                object[] keyValues1;\r\n                keyValues1 = new object[]{ (object)dataReader.GetInt32(0) };\r\n                return ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(\r\n                    entityType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")], \r\n                    properties: [LIFTABLE Constant: List<RuntimeProperty> { Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd } | Resolver: c => c.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindPrimaryKey().Properties], \r\n                    keyValues: keyValues1);\r\n            };\r\n            return instance1;\r\n        };\r\n        return entity;\r\n    }, \r\n    contextType: greenhouse_aspnet_api.db.Models.GreenhouseDbContext, \r\n    standAloneStateManager: False, \r\n    detailedErrorsEnabled: False, \r\n    threadSafetyChecksEnabled: True)","EventId":{"Id":10107,"Name":"Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:13.6537440+07:00","Level":"Debug","MessageTemplate":"Creating DbConnection.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EventId":{"Id":20005,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:13.7398792+07:00","Level":"Debug","MessageTemplate":"Created DbConnection. ({elapsed}ms).","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"elapsed":81,"EventId":{"Id":20006,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:13.7472895+07:00","Level":"Debug","MessageTemplate":"Opening connection to database '{database}' on server '{server}'.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20000,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.1029538+07:00","Level":"Debug","MessageTemplate":"Opened connection to database '{database}' on server '{server}'.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20001,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.1093151+07:00","Level":"Debug","MessageTemplate":"Creating DbCommand for '{executionType}'.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"executionType":"ExecuteReader","EventId":{"Id":20103,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.1207272+07:00","Level":"Debug","MessageTemplate":"Created DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"executionType":"ExecuteReader","elapsed":8,"EventId":{"Id":20104,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.1228447+07:00","Level":"Debug","MessageTemplate":"Initialized DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"executionType":"ExecuteReader","elapsed":15,"EventId":{"Id":20106,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.1328099+07:00","Level":"Debug","MessageTemplate":"Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.id, d.code, d.\"createdAt\", d.\"hasRelay\", d.name, d.status, d.type, d.\"updatedAt\"\r\nFROM device AS d","EventId":{"Id":20100,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.1935712+07:00","Level":"Information","MessageTemplate":"Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"elapsed":"44","parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.id, d.code, d.\"createdAt\", d.\"hasRelay\", d.name, d.status, d.type, d.\"updatedAt\"\r\nFROM device AS d","EventId":{"Id":20101,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:14.4933020+07:00","Level":"Error","MessageTemplate":"An exception occurred while iterating over the results of a query for context type '{contextType}'.{newline}{error}","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Exception":"System.InvalidCastException: Reading as 'System.Int32' is not supported for fields having DataTypeName 'character varying'\r\n   at Npgsql.Internal.AdoSerializerHelpers.<GetTypeInfoForReading>g__ThrowReadingNotSupported|0_0(Type type, PgSerializerOptions options, PgTypeId pgTypeId, Exception inner)\r\n   at Npgsql.Internal.AdoSerializerHelpers.GetTypeInfoForReading(Type type, PgTypeId pgTypeId, PgSerializerOptions options)\r\n   at Npgsql.BackendMessages.FieldDescription.<GetInfoCore>g__GetInfoSlow|51_0(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.BackendMessages.FieldDescription.GetInfoCore(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.BackendMessages.FieldDescription.GetInfo(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.NpgsqlDataReader.<GetInfo>g__Slow|133_0(ColumnInfo& info, PgConverter& converter, Size& bufferRequirement, Boolean& asObject, <>c__DisplayClass133_0&)\r\n   at Npgsql.NpgsqlDataReader.GetFieldValueCore[T](Int32 ordinal)\r\n   at Npgsql.NpgsqlDataReader.GetInt32(Int32 ordinal)\r\n   at lambda_method18(Closure, QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()","Properties":{"contextType":"greenhouse_aspnet_api.db.Models.GreenhouseDbContext","newline":"\r\n","error":"System.InvalidCastException: Reading as 'System.Int32' is not supported for fields having DataTypeName 'character varying'\r\n   at Npgsql.Internal.AdoSerializerHelpers.<GetTypeInfoForReading>g__ThrowReadingNotSupported|0_0(Type type, PgSerializerOptions options, PgTypeId pgTypeId, Exception inner)\r\n   at Npgsql.Internal.AdoSerializerHelpers.GetTypeInfoForReading(Type type, PgTypeId pgTypeId, PgSerializerOptions options)\r\n   at Npgsql.BackendMessages.FieldDescription.<GetInfoCore>g__GetInfoSlow|51_0(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.BackendMessages.FieldDescription.GetInfoCore(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.BackendMessages.FieldDescription.GetInfo(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.NpgsqlDataReader.<GetInfo>g__Slow|133_0(ColumnInfo& info, PgConverter& converter, Size& bufferRequirement, Boolean& asObject, <>c__DisplayClass133_0&)\r\n   at Npgsql.NpgsqlDataReader.GetFieldValueCore[T](Int32 ordinal)\r\n   at Npgsql.NpgsqlDataReader.GetInt32(Int32 ordinal)\r\n   at lambda_method18(Closure, QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()","EventId":{"Id":10100,"Name":"Microsoft.EntityFrameworkCore.Query.QueryIterationFailed"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.6795294+07:00","Level":"Debug","MessageTemplate":"Closing data reader to '{database}' on server '{server}'.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20301,"Name":"Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.6979975+07:00","Level":"Debug","MessageTemplate":"A data reader for '{database}' on server '{server}' is being disposed after spending {elapsed}ms reading results.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":38495,"EventId":{"Id":20300,"Name":"Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.7015587+07:00","Level":"Debug","MessageTemplate":"Closing connection to database '{database}' on server '{server}'.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20002,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.7083182+07:00","Level":"Debug","MessageTemplate":"Closed connection to database '{database}' on server '{server}' ({elapsed}ms).","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":6,"EventId":{"Id":20003,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"f2ad2e2e-9dcd-4fb8-82a2-38d7eef1a655","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.7194836+07:00","Level":"Information","MessageTemplate":"Executed action {ActionName} in {ElapsedMilliseconds}ms","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","ElapsedMilliseconds":41002.4734,"EventId":{"Id":105,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.7313631+07:00","Level":"Information","MessageTemplate":"Executed endpoint '{EndpointName}'","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.7817669+07:00","Level":"Error","MessageTemplate":"Unhandled Exception Occurred","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Exception":"System.InvalidCastException: Reading as 'System.Int32' is not supported for fields having DataTypeName 'character varying'\r\n   at Npgsql.Internal.AdoSerializerHelpers.<GetTypeInfoForReading>g__ThrowReadingNotSupported|0_0(Type type, PgSerializerOptions options, PgTypeId pgTypeId, Exception inner)\r\n   at Npgsql.Internal.AdoSerializerHelpers.GetTypeInfoForReading(Type type, PgTypeId pgTypeId, PgSerializerOptions options)\r\n   at Npgsql.BackendMessages.FieldDescription.<GetInfoCore>g__GetInfoSlow|51_0(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.BackendMessages.FieldDescription.GetInfoCore(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.BackendMessages.FieldDescription.GetInfo(Type type, ColumnInfo& lastColumnInfo)\r\n   at Npgsql.NpgsqlDataReader.<GetInfo>g__Slow|133_0(ColumnInfo& info, PgConverter& converter, Size& bufferRequirement, Boolean& asObject, <>c__DisplayClass133_0&)\r\n   at Npgsql.NpgsqlDataReader.GetFieldValueCore[T](Int32 ordinal)\r\n   at Npgsql.NpgsqlDataReader.GetInt32(Int32 ordinal)\r\n   at lambda_method18(Closure, QueryContext, DbDataReader, ResultContext, SingleQueryResultCoordinator)\r\n   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   at greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest() in d:\\IOT\\greenhouse-aspnet-api\\Controllers\\WeatherForecastController.cs:line 40\r\n   at lambda_method2(Closure, Object, Object[])\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.SyncObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeActionMethodAsync()\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|7_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\r\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\r\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\r\n   at greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware.Invoke(HttpContext context) in d:\\IOT\\greenhouse-aspnet-api\\middlewares\\GlobalExceptionMiddleware.cs:line 21","Properties":{"SourceContext":"greenhouse_aspnet_api.Middlewares.GlobalExceptionMiddleware","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:35:52.8526214+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"ConnectionId":"0HNBI1IS523NU","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test"}}
{"Timestamp":"2025-04-03T00:35:52.8698919+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"fc27d6fb921424b6a4b98727b646152d","SpanId":"66cd3afed959ea99","Properties":{"ElapsedMilliseconds":41403.394,"StatusCode":500,"ContentType":"application/json","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1IS523NU:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1IS523NU"}}
{"Timestamp":"2025-04-03T00:43:17.4847260+07:00","Level":"Information","MessageTemplate":"Starting up"}
{"Timestamp":"2025-04-03T00:43:18.3154923+07:00","Level":"Debug","MessageTemplate":"Registered model binder providers, in the following order: {ModelBinderProviders}","Properties":{"ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory"}}
{"Timestamp":"2025-04-03T00:43:18.4112552+07:00","Level":"Debug","MessageTemplate":"Hosting starting","Properties":{"EventId":{"Id":1,"Name":"Starting"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:43:18.5395855+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:43:18.5437324+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:43:18.5887145+07:00","Level":"Information","MessageTemplate":"Now listening on: {address}","Properties":{"address":"http://[::]:5001","EventId":{"Id":14,"Name":"ListeningOnAddress"},"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:43:18.5889226+07:00","Level":"Debug","MessageTemplate":"Loaded hosting startup assembly {assemblyName}","Properties":{"assemblyName":"greenhouse-aspnet-api","EventId":{"Id":13,"Name":"HostingStartupAssemblyLoaded"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}}
{"Timestamp":"2025-04-03T00:43:18.5893481+07:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:43:18.5896804+07:00","Level":"Information","MessageTemplate":"Hosting environment: {EnvName}","Properties":{"EnvName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:43:18.5897615+07:00","Level":"Information","MessageTemplate":"Content root path: {ContentRoot}","Properties":{"ContentRoot":"D:\\IOT\\greenhouse-aspnet-api","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:43:18.5899043+07:00","Level":"Debug","MessageTemplate":"Hosting started","Properties":{"EventId":{"Id":2,"Name":"Started"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:44:06.2372672+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" accepted.","Properties":{"ConnectionId":"0HNBI1NRHLLGH","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:44:06.2746030+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" started.","Properties":{"ConnectionId":"0HNBI1NRHLLGH","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:44:06.3443237+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4029804+07:00","Level":"Debug","MessageTemplate":"{CandidateCount} candidate(s) found for the request path '{Path}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"CandidateCount":1,"Path":"/api/WeatherForecast/test","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4082077+07:00","Level":"Debug","MessageTemplate":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"Endpoint":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RoutePattern":"api/WeatherForecast/test","Path":"/api/WeatherForecast/test","EventId":{"Id":1005,"Name":"CandidateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4099660+07:00","Level":"Debug","MessageTemplate":"Request matched endpoint '{EndpointName}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4220141+07:00","Level":"Warning","MessageTemplate":"Failed to determine the https port for redirect.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EventId":{"Id":3,"Name":"FailedToDeterminePort"},"SourceContext":"Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4562108+07:00","Level":"Debug","MessageTemplate":"Static files was skipped as the request already matched an endpoint.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EventId":{"Id":15,"Name":"EndpointMatched"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4574279+07:00","Level":"Information","MessageTemplate":"Executing endpoint '{EndpointName}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4785967+07:00","Level":"Information","MessageTemplate":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"RouteData":"{action = \"GetTest\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[greenhouse_aspnet_api.db.Models.Device] GetTest()","Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":102,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4827703+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4844774+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4876698+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4880894+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4883139+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.4910082+07:00","Level":"Debug","MessageTemplate":"Executing controller factory for controller {Controller} ({AssemblyName})","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.7354720+07:00","Level":"Debug","MessageTemplate":"An 'IServiceProvider' was created for internal use by Entity Framework.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EventId":{"Id":10401,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:06.7746130+07:00","Level":"Debug","MessageTemplate":"Executed controller factory for controller {Controller} ({AssemblyName})","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.1059390+07:00","Level":"Debug","MessageTemplate":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}:{providerVersion}' with options: {options}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"version":"9.0.1","contextType":"GreenhouseDbContext","provider":"Npgsql.EntityFrameworkCore.PostgreSQL","providerVersion":"9.0.4+fd2380957bee5cd86f336466af36b08c0163f1a5","options":"NoTracking MaxPoolSize=1024 ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.1703855+07:00","Level":"Debug","MessageTemplate":"Compiling query expression: {newline}'{queryExpression}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"newline":"\r\n","queryExpression":"DbSet<Device>()","EventId":{"Id":10111,"Name":"Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.6619231+07:00","Level":"Debug","MessageTemplate":"Generated query execution expression: {newline}'{plan}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"newline":"\r\n","plan":"queryContext => SingleQueryingEnumerable.Create<Device>(\r\n    relationalQueryContext: (RelationalQueryContext)queryContext, \r\n    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(\r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.Status (DeviceStatus) Required, 5], [Property: Device.Type (DeviceType) Required, 6], [Property: Device.UpdatedAt (DateTime) Required, 7] }\r\n        SELECT d.id, d.code, d.createdAt, d.hasRelay, d.name, d.status, d.type, d.updatedAt\r\n        FROM device AS d) | Resolver: c => new RelationalCommandCache(\r\n        c.Dependencies.MemoryCache, \r\n        c.RelationalDependencies.QuerySqlGeneratorFactory, \r\n        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, \r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.Status (DeviceStatus) Required, 5], [Property: Device.Type (DeviceType) Required, 6], [Property: Device.UpdatedAt (DateTime) Required, 7] }\r\n        SELECT d.id, d.code, d.createdAt, d.hasRelay, d.name, d.status, d.type, d.updatedAt\r\n        FROM device AS d, \r\n        False, \r\n        new HashSet<string>(\r\n            new string[]{ }, \r\n            StringComparer.Ordinal\r\n        )\r\n    )].GetRelationalCommandTemplate(parameters), \r\n    readerColumns: null, \r\n    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => \r\n    {\r\n        Device entity;\r\n        entity = \r\n        {\r\n            MaterializationContext materializationContext1;\r\n            IEntityType entityType1;\r\n            Device instance1;\r\n            materializationContext1 = new MaterializationContext(\r\n                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], \r\n                queryContext.Context\r\n            );\r\n            instance1 = default(Device);\r\n            (object)dataReader.GetInt32(0) != null ? \r\n            {\r\n                ISnapshot shadowSnapshot1;\r\n                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];\r\n                entityType1 = [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")];\r\n                instance1 = switch (entityType1)\r\n                {\r\n                    case [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]: \r\n                        {\r\n                            return \r\n                            {\r\n                                Device instance;\r\n                                instance = new Device();\r\n                                instance.<Id>k__BackingField = dataReader.GetInt32(0);\r\n                                instance.<Code>k__BackingField = dataReader.GetString(1);\r\n                                instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(2);\r\n                                instance.<HasRelay>k__BackingField = dataReader.GetBoolean(3);\r\n                                instance.<Name>k__BackingField = dataReader.GetString(4);\r\n                                instance.<Status>k__BackingField = Invoke(((ValueConverter<DeviceStatus, string>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Status (DeviceStatus) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Status\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetString(5));\r\n                                instance.<Type>k__BackingField = Invoke(((ValueConverter<DeviceType, string>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Type (DeviceType) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Type\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetString(6));\r\n                                instance.<UpdatedAt>k__BackingField = dataReader.GetDateTime(7);\r\n                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(\r\n                                    context: materializationContext1.Context, \r\n                                    entity: instance, \r\n                                    queryTrackingBehavior: NoTracking, \r\n                                    structuralType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]) : default(void);\r\n                                return instance;\r\n                            }}\r\n                    default: \r\n                        default(Device)\r\n                }\r\n                ;\r\n                return instance1;\r\n            } : \r\n            {\r\n                object[] keyValues1;\r\n                keyValues1 = new object[]{ (object)dataReader.GetInt32(0) };\r\n                return ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(\r\n                    entityType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")], \r\n                    properties: [LIFTABLE Constant: List<RuntimeProperty> { Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd } | Resolver: c => c.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindPrimaryKey().Properties], \r\n                    keyValues: keyValues1);\r\n            };\r\n            return instance1;\r\n        };\r\n        return entity;\r\n    }, \r\n    contextType: greenhouse_aspnet_api.db.Models.GreenhouseDbContext, \r\n    standAloneStateManager: False, \r\n    detailedErrorsEnabled: False, \r\n    threadSafetyChecksEnabled: True)","EventId":{"Id":10107,"Name":"Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.7014453+07:00","Level":"Debug","MessageTemplate":"Creating DbConnection.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EventId":{"Id":20005,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.7683508+07:00","Level":"Debug","MessageTemplate":"Created DbConnection. ({elapsed}ms).","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"elapsed":61,"EventId":{"Id":20006,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.7725666+07:00","Level":"Debug","MessageTemplate":"Opening connection to database '{database}' on server '{server}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20000,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.9773699+07:00","Level":"Debug","MessageTemplate":"Opened connection to database '{database}' on server '{server}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20001,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.9827280+07:00","Level":"Debug","MessageTemplate":"Creating DbCommand for '{executionType}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"executionType":"ExecuteReader","EventId":{"Id":20103,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.9946902+07:00","Level":"Debug","MessageTemplate":"Created DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"executionType":"ExecuteReader","elapsed":7,"EventId":{"Id":20104,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:08.9967488+07:00","Level":"Debug","MessageTemplate":"Initialized DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"executionType":"ExecuteReader","elapsed":15,"EventId":{"Id":20106,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.0085251+07:00","Level":"Debug","MessageTemplate":"Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.id, d.code, d.\"createdAt\", d.\"hasRelay\", d.name, d.status, d.type, d.\"updatedAt\"\r\nFROM device AS d","EventId":{"Id":20100,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.0756495+07:00","Level":"Information","MessageTemplate":"Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"elapsed":"53","parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.id, d.code, d.\"createdAt\", d.\"hasRelay\", d.name, d.status, d.type, d.\"updatedAt\"\r\nFROM device AS d","EventId":{"Id":20101,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.1784646+07:00","Level":"Debug","MessageTemplate":"Closing data reader to '{database}' on server '{server}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20301,"Name":"Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.1923282+07:00","Level":"Debug","MessageTemplate":"A data reader for '{database}' on server '{server}' is being disposed after spending {elapsed}ms reading results.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":110,"EventId":{"Id":20300,"Name":"Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.1959330+07:00","Level":"Debug","MessageTemplate":"Closing connection to database '{database}' on server '{server}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20002,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2037267+07:00","Level":"Debug","MessageTemplate":"Closed connection to database '{database}' on server '{server}' ({elapsed}ms).","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":7,"EventId":{"Id":20003,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2096652+07:00","Level":"Debug","MessageTemplate":"List of registered output formatters, in the following order: {OutputFormatters}","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"OutputFormatters":["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"],"EventId":{"Id":11,"Name":"RegisteredOutputFormatters"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2141306+07:00","Level":"Debug","MessageTemplate":"Attempting to select an output formatter based on Accept header '{AcceptHeader}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"AcceptHeader":["text/plain"],"EventId":{"Id":6,"Name":"SelectingOutputFormatterUsingAcceptHeader"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2159448+07:00","Level":"Debug","MessageTemplate":"Could not find an output formatter based on content negotiation. Accepted types were ({AcceptTypes})","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"AcceptTypes":["text/plain"],"EventId":{"Id":5,"Name":"NoFormatterFromNegotiation"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2165896+07:00","Level":"Debug","MessageTemplate":"Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EventId":{"Id":8,"Name":"SelectingOutputFormatterWithoutUsingContentTypes"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2169690+07:00","Level":"Debug","MessageTemplate":"Attempting to select the first formatter in the output formatters list which can write the result.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EventId":{"Id":10,"Name":"SelectingFirstCanWriteFormatter"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2185397+07:00","Level":"Debug","MessageTemplate":"Selected output formatter '{OutputFormatter}' and content type '{ContentType}' to write the response.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"OutputFormatter":"Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter","ContentType":"application/json","EventId":{"Id":2,"Name":"FormatterSelected"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.2194364+07:00","Level":"Information","MessageTemplate":"Executing {ObjectResultType}, writing value of type '{Type}'.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"ObjectResultType":"ObjectResult","Type":"System.Collections.Generic.List`1[[greenhouse_aspnet_api.db.Models.Device, greenhouse-aspnet-api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]","EventId":{"Id":1,"Name":"ObjectResultExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor","ActionId":"bcc87f35-70aa-4dd9-b3a6-a1d8ba3cab21","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.3007507+07:00","Level":"Information","MessageTemplate":"Executed action {ActionName} in {ElapsedMilliseconds}ms","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","ElapsedMilliseconds":2808.1055,"EventId":{"Id":105,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.3085225+07:00","Level":"Information","MessageTemplate":"Executed endpoint '{EndpointName}'","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:44:09.4379715+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"ConnectionId":"0HNBI1NRHLLGH","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test"}}
{"Timestamp":"2025-04-03T00:44:09.4578030+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"107910aa2eb8f90133a94d6f8b41bb46","SpanId":"cf2802ee1d1a6a5a","Properties":{"ElapsedMilliseconds":3118.3181,"StatusCode":200,"ContentType":"application/json","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1NRHLLGH:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1NRHLLGH"}}
{"Timestamp":"2025-04-03T00:45:25.9103854+07:00","Level":"Information","MessageTemplate":"Starting up"}
{"Timestamp":"2025-04-03T00:45:26.7335059+07:00","Level":"Debug","MessageTemplate":"Registered model binder providers, in the following order: {ModelBinderProviders}","Properties":{"ModelBinderProviders":["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"],"EventId":{"Id":12,"Name":"RegisteredModelBinderProviders"},"SourceContext":"Microsoft.AspNetCore.Mvc.ModelBinding.ModelBinderFactory"}}
{"Timestamp":"2025-04-03T00:45:26.8473730+07:00","Level":"Debug","MessageTemplate":"Hosting starting","Properties":{"EventId":{"Id":1,"Name":"Starting"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:45:27.0078429+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:45:27.0114335+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:45:27.0617751+07:00","Level":"Information","MessageTemplate":"Now listening on: {address}","Properties":{"address":"http://[::]:5001","EventId":{"Id":14,"Name":"ListeningOnAddress"},"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:45:27.0621526+07:00","Level":"Debug","MessageTemplate":"Loaded hosting startup assembly {assemblyName}","Properties":{"assemblyName":"greenhouse-aspnet-api","EventId":{"Id":13,"Name":"HostingStartupAssemblyLoaded"},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics"}}
{"Timestamp":"2025-04-03T00:45:27.0631186+07:00","Level":"Information","MessageTemplate":"Application started. Press Ctrl+C to shut down.","Properties":{"SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:45:27.0637780+07:00","Level":"Information","MessageTemplate":"Hosting environment: {EnvName}","Properties":{"EnvName":"Development","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:45:27.0639854+07:00","Level":"Information","MessageTemplate":"Content root path: {ContentRoot}","Properties":{"ContentRoot":"D:\\IOT\\greenhouse-aspnet-api","SourceContext":"Microsoft.Hosting.Lifetime"}}
{"Timestamp":"2025-04-03T00:45:27.0642655+07:00","Level":"Debug","MessageTemplate":"Hosting started","Properties":{"EventId":{"Id":2,"Name":"Started"},"SourceContext":"Microsoft.Extensions.Hosting.Internal.Host"}}
{"Timestamp":"2025-04-03T00:45:32.6064811+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" accepted.","Properties":{"ConnectionId":"0HNBI1OL9BPP4","EventId":{"Id":39,"Name":"ConnectionAccepted"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:45:32.6201933+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" started.","Properties":{"ConnectionId":"0HNBI1OL9BPP4","EventId":{"Id":1,"Name":"ConnectionStart"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections"}}
{"Timestamp":"2025-04-03T00:45:32.7002197+07:00","Level":"Information","MessageTemplate":"Request starting {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {ContentType} {ContentLength}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"Protocol":"HTTP/1.1","Method":"GET","ContentType":null,"ContentLength":null,"Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":1},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.7820446+07:00","Level":"Debug","MessageTemplate":"{CandidateCount} candidate(s) found for the request path '{Path}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"CandidateCount":1,"Path":"/api/WeatherForecast/test","EventId":{"Id":1001,"Name":"CandidatesFound"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.7880171+07:00","Level":"Debug","MessageTemplate":"Endpoint '{Endpoint}' with route pattern '{RoutePattern}' is valid for the request path '{Path}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"Endpoint":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RoutePattern":"api/WeatherForecast/test","Path":"/api/WeatherForecast/test","EventId":{"Id":1005,"Name":"CandidateValid"},"SourceContext":"Microsoft.AspNetCore.Routing.Matching.DfaMatcher","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.7896891+07:00","Level":"Debug","MessageTemplate":"Request matched endpoint '{EndpointName}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"MatchSuccess"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.8030035+07:00","Level":"Warning","MessageTemplate":"Failed to determine the https port for redirect.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EventId":{"Id":3,"Name":"FailedToDeterminePort"},"SourceContext":"Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.8992374+07:00","Level":"Debug","MessageTemplate":"Static files was skipped as the request already matched an endpoint.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EventId":{"Id":15,"Name":"EndpointMatched"},"SourceContext":"Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9011682+07:00","Level":"Information","MessageTemplate":"Executing endpoint '{EndpointName}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Name":"ExecutingEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9368566+07:00","Level":"Information","MessageTemplate":"Route matched with {RouteData}. Executing controller action with signature {MethodInfo} on controller {Controller} ({AssemblyName}).","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"RouteData":"{action = \"GetTest\", controller = \"WeatherForecast\"}","MethodInfo":"System.Collections.Generic.IEnumerable`1[greenhouse_aspnet_api.db.Models.Device] GetTest()","Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":102,"Name":"ControllerActionExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9468095+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"FilterType":"authorization","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9497112+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"FilterType":"resource","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9529914+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"FilterType":"action","Filters":["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9534451+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"FilterType":"exception","Filters":["None"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9542128+07:00","Level":"Debug","MessageTemplate":"Execution plan of {FilterType} filters (in the following order): {Filters}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"FilterType":"result","Filters":["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"],"EventId":{"Id":1,"Name":"FilterExecutionPlan"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:32.9595247+07:00","Level":"Debug","MessageTemplate":"Executing controller factory for controller {Controller} ({AssemblyName})","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":1,"Name":"ControllerFactoryExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:33.1983940+07:00","Level":"Debug","MessageTemplate":"An 'IServiceProvider' was created for internal use by Entity Framework.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EventId":{"Id":10401,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ServiceProviderCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:33.2355721+07:00","Level":"Debug","MessageTemplate":"Executed controller factory for controller {Controller} ({AssemblyName})","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"Controller":"greenhouse_aspnet_api.Controllers.WeatherForecastController","AssemblyName":"greenhouse-aspnet-api","EventId":{"Id":2,"Name":"ControllerFactoryExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.1678581+07:00","Level":"Debug","MessageTemplate":"Entity Framework Core {version} initialized '{contextType}' using provider '{provider}:{providerVersion}' with options: {options}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"version":"9.0.1","contextType":"GreenhouseDbContext","provider":"Npgsql.EntityFrameworkCore.PostgreSQL","providerVersion":"9.0.4+fd2380957bee5cd86f336466af36b08c0163f1a5","options":"NoTracking MaxPoolSize=1024 ","EventId":{"Id":10403,"Name":"Microsoft.EntityFrameworkCore.Infrastructure.ContextInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Infrastructure","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.1977319+07:00","Level":"Debug","MessageTemplate":"Compiling query expression: {newline}'{queryExpression}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"newline":"\r\n","queryExpression":"DbSet<Device>()","EventId":{"Id":10111,"Name":"Microsoft.EntityFrameworkCore.Query.QueryCompilationStarting"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.5857136+07:00","Level":"Debug","MessageTemplate":"Generated query execution expression: {newline}'{plan}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"newline":"\r\n","plan":"queryContext => SingleQueryingEnumerable.Create<Device>(\r\n    relationalQueryContext: (RelationalQueryContext)queryContext, \r\n    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(\r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.SearchVector (NpgsqlTsVector) Required Index BeforeSave:Ignore AfterSave:Ignore ValueGenerated.OnAddOrUpdate, 5], [Property: Device.Status (DeviceStatus) Required, 6], [Property: Device.Type (DeviceType) Required, 7], [Property: Device.UpdatedAt (DateTime) Required, 8] }\r\n        SELECT d.id, d.code, d.createdAt, d.hasRelay, d.name, d.search_vector, d.status, d.type, d.updatedAt\r\n        FROM device AS d) | Resolver: c => new RelationalCommandCache(\r\n        c.Dependencies.MemoryCache, \r\n        c.RelationalDependencies.QuerySqlGeneratorFactory, \r\n        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, \r\n        Projection Mapping:\r\n            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: Device.Code (string) Required, 1], [Property: Device.CreatedAt (DateTime) Required, 2], [Property: Device.HasRelay (bool) Required, 3], [Property: Device.Name (string) Required, 4], [Property: Device.SearchVector (NpgsqlTsVector) Required Index BeforeSave:Ignore AfterSave:Ignore ValueGenerated.OnAddOrUpdate, 5], [Property: Device.Status (DeviceStatus) Required, 6], [Property: Device.Type (DeviceType) Required, 7], [Property: Device.UpdatedAt (DateTime) Required, 8] }\r\n        SELECT d.id, d.code, d.createdAt, d.hasRelay, d.name, d.search_vector, d.status, d.type, d.updatedAt\r\n        FROM device AS d, \r\n        False, \r\n        new HashSet<string>(\r\n            new string[]{ }, \r\n            StringComparer.Ordinal\r\n        )\r\n    )].GetRelationalCommandTemplate(parameters), \r\n    readerColumns: null, \r\n    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => \r\n    {\r\n        Device entity;\r\n        entity = \r\n        {\r\n            MaterializationContext materializationContext1;\r\n            IEntityType entityType1;\r\n            Device instance1;\r\n            materializationContext1 = new MaterializationContext(\r\n                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], \r\n                queryContext.Context\r\n            );\r\n            instance1 = default(Device);\r\n            (object)dataReader.GetInt32(0) != null ? \r\n            {\r\n                ISnapshot shadowSnapshot1;\r\n                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];\r\n                entityType1 = [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")];\r\n                instance1 = switch (entityType1)\r\n                {\r\n                    case [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]: \r\n                        {\r\n                            return \r\n                            {\r\n                                Device instance;\r\n                                instance = new Device();\r\n                                instance.<Id>k__BackingField = dataReader.GetInt32(0);\r\n                                instance.<Code>k__BackingField = dataReader.GetString(1);\r\n                                instance.<CreatedAt>k__BackingField = dataReader.GetDateTime(2);\r\n                                instance.<HasRelay>k__BackingField = dataReader.GetBoolean(3);\r\n                                instance.<Name>k__BackingField = dataReader.GetString(4);\r\n                                instance.<SearchVector>k__BackingField = dataReader.GetFieldValue<NpgsqlTsVector>(5);\r\n                                instance.<Status>k__BackingField = Invoke(((ValueConverter<DeviceStatus, string>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Status (DeviceStatus) Required | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Status\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetString(6));\r\n                                instance.<Type>k__BackingField = Invoke(((ValueConverter<DeviceType, string>)((IReadOnlyProperty)[LIFTABLE Constant: Property: Device.Type (DeviceType) Required | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindProperty(\"Type\")]).GetTypeMapping().Converter).ConvertFromProviderTyped, dataReader.GetString(7));\r\n                                instance.<UpdatedAt>k__BackingField = dataReader.GetDateTime(8);\r\n                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(\r\n                                    context: materializationContext1.Context, \r\n                                    entity: instance, \r\n                                    queryTrackingBehavior: NoTracking, \r\n                                    structuralType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")]) : default(void);\r\n                                return instance;\r\n                            }}\r\n                    default: \r\n                        default(Device)\r\n                }\r\n                ;\r\n                return instance1;\r\n            } : \r\n            {\r\n                object[] keyValues1;\r\n                keyValues1 = new object[]{ (object)dataReader.GetInt32(0) };\r\n                return ShapedQueryCompilingExpressionVisitor.CreateNullKeyValueInNoTrackingQuery(\r\n                    entityType: [LIFTABLE Constant: EntityType: Device | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\")], \r\n                    properties: [LIFTABLE Constant: List<RuntimeProperty> { Property: Device.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd } | Resolver: c => c.Dependencies.Model.FindEntityType(\"greenhouse_aspnet_api.db.Models.Device\").FindPrimaryKey().Properties], \r\n                    keyValues: keyValues1);\r\n            };\r\n            return instance1;\r\n        };\r\n        return entity;\r\n    }, \r\n    contextType: greenhouse_aspnet_api.db.Models.GreenhouseDbContext, \r\n    standAloneStateManager: False, \r\n    detailedErrorsEnabled: False, \r\n    threadSafetyChecksEnabled: True)","EventId":{"Id":10107,"Name":"Microsoft.EntityFrameworkCore.Query.QueryExecutionPlanned"},"SourceContext":"Microsoft.EntityFrameworkCore.Query","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.6246320+07:00","Level":"Debug","MessageTemplate":"Creating DbConnection.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EventId":{"Id":20005,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.6763031+07:00","Level":"Debug","MessageTemplate":"Created DbConnection. ({elapsed}ms).","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"elapsed":47,"EventId":{"Id":20006,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.6794809+07:00","Level":"Debug","MessageTemplate":"Opening connection to database '{database}' on server '{server}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20000,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpening"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.8356682+07:00","Level":"Debug","MessageTemplate":"Opened connection to database '{database}' on server '{server}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20001,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionOpened"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.8395422+07:00","Level":"Debug","MessageTemplate":"Creating DbCommand for '{executionType}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"executionType":"ExecuteReader","EventId":{"Id":20103,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreating"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.8466650+07:00","Level":"Debug","MessageTemplate":"Created DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"executionType":"ExecuteReader","elapsed":4,"EventId":{"Id":20104,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandCreated"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.8480895+07:00","Level":"Debug","MessageTemplate":"Initialized DbCommand for '{executionType}' ({elapsed}ms).","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"executionType":"ExecuteReader","elapsed":9,"EventId":{"Id":20106,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandInitialized"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.8565363+07:00","Level":"Debug","MessageTemplate":"Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.id, d.code, d.\"createdAt\", d.\"hasRelay\", d.name, d.search_vector, d.status, d.type, d.\"updatedAt\"\r\nFROM device AS d","EventId":{"Id":20100,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuting"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:34.9092177+07:00","Level":"Information","MessageTemplate":"Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"elapsed":"39","parameters":"","commandType":"Text","commandTimeout":30,"newLine":"\r\n","commandText":"SELECT d.id, d.code, d.\"createdAt\", d.\"hasRelay\", d.name, d.search_vector, d.status, d.type, d.\"updatedAt\"\r\nFROM device AS d","EventId":{"Id":20101,"Name":"Microsoft.EntityFrameworkCore.Database.Command.CommandExecuted"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0047675+07:00","Level":"Debug","MessageTemplate":"Closing data reader to '{database}' on server '{server}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20301,"Name":"Microsoft.EntityFrameworkCore.Database.Command.DataReaderClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0165778+07:00","Level":"Debug","MessageTemplate":"A data reader for '{database}' on server '{server}' is being disposed after spending {elapsed}ms reading results.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":101,"EventId":{"Id":20300,"Name":"Microsoft.EntityFrameworkCore.Database.Command.DataReaderDisposing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Command","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0207479+07:00","Level":"Debug","MessageTemplate":"Closing connection to database '{database}' on server '{server}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","EventId":{"Id":20002,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosing"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0274335+07:00","Level":"Debug","MessageTemplate":"Closed connection to database '{database}' on server '{server}' ({elapsed}ms).","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"database":"greenhouse","server":"tcp://localhost:5432","elapsed":7,"EventId":{"Id":20003,"Name":"Microsoft.EntityFrameworkCore.Database.Connection.ConnectionClosed"},"SourceContext":"Microsoft.EntityFrameworkCore.Database.Connection","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0320719+07:00","Level":"Debug","MessageTemplate":"List of registered output formatters, in the following order: {OutputFormatters}","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"OutputFormatters":["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"],"EventId":{"Id":11,"Name":"RegisteredOutputFormatters"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0360475+07:00","Level":"Debug","MessageTemplate":"Attempting to select an output formatter based on Accept header '{AcceptHeader}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"AcceptHeader":["text/plain"],"EventId":{"Id":6,"Name":"SelectingOutputFormatterUsingAcceptHeader"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0386072+07:00","Level":"Debug","MessageTemplate":"Could not find an output formatter based on content negotiation. Accepted types were ({AcceptTypes})","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"AcceptTypes":["text/plain"],"EventId":{"Id":5,"Name":"NoFormatterFromNegotiation"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0390713+07:00","Level":"Debug","MessageTemplate":"Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EventId":{"Id":8,"Name":"SelectingOutputFormatterWithoutUsingContentTypes"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0393137+07:00","Level":"Debug","MessageTemplate":"Attempting to select the first formatter in the output formatters list which can write the result.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EventId":{"Id":10,"Name":"SelectingFirstCanWriteFormatter"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0415395+07:00","Level":"Debug","MessageTemplate":"Selected output formatter '{OutputFormatter}' and content type '{ContentType}' to write the response.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"OutputFormatter":"Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter","ContentType":"application/json","EventId":{"Id":2,"Name":"FormatterSelected"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.DefaultOutputFormatterSelector","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.0422814+07:00","Level":"Information","MessageTemplate":"Executing {ObjectResultType}, writing value of type '{Type}'.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"ObjectResultType":"ObjectResult","Type":"System.Collections.Generic.List`1[[greenhouse_aspnet_api.db.Models.Device, greenhouse-aspnet-api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]","EventId":{"Id":1,"Name":"ObjectResultExecuting"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor","ActionId":"3f5c637c-52be-4eb9-9503-c2468b871d8c","ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.1182444+07:00","Level":"Information","MessageTemplate":"Executed action {ActionName} in {ElapsedMilliseconds}ms","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"ActionName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","ElapsedMilliseconds":2160.3291,"EventId":{"Id":105,"Name":"ActionExecuted"},"SourceContext":"Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.1254088+07:00","Level":"Information","MessageTemplate":"Executed endpoint '{EndpointName}'","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"EndpointName":"greenhouse_aspnet_api.Controllers.WeatherForecastController.GetTest (greenhouse-aspnet-api)","EventId":{"Id":1,"Name":"ExecutedEndpoint"},"SourceContext":"Microsoft.AspNetCore.Routing.EndpointMiddleware","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:45:35.2291296+07:00","Level":"Debug","MessageTemplate":"Connection id \"{ConnectionId}\" completed keep alive response.","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"ConnectionId":"0HNBI1OL9BPP4","EventId":{"Id":9,"Name":"ConnectionKeepAlive"},"SourceContext":"Microsoft.AspNetCore.Server.Kestrel.Connections","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test"}}
{"Timestamp":"2025-04-03T00:45:35.2464540+07:00","Level":"Information","MessageTemplate":"Request finished {Protocol} {Method} {Scheme}://{Host}{PathBase}{Path}{QueryString} - {StatusCode} {ContentLength} {ContentType} {ElapsedMilliseconds}ms","TraceId":"bf9f66772a27da47f4f94a083773c742","SpanId":"b0650d2f290f4226","Properties":{"ElapsedMilliseconds":2550.6737,"StatusCode":200,"ContentType":"application/json","ContentLength":null,"Protocol":"HTTP/1.1","Method":"GET","Scheme":"http","Host":"localhost:5001","PathBase":"","Path":"/api/WeatherForecast/test","QueryString":"","EventId":{"Id":2},"SourceContext":"Microsoft.AspNetCore.Hosting.Diagnostics","RequestId":"0HNBI1OL9BPP4:00000001","RequestPath":"/api/WeatherForecast/test","ConnectionId":"0HNBI1OL9BPP4"}}
{"Timestamp":"2025-04-03T00:46:51.9841022+07:00","Level":"Debug","MessageTemplate":"Config reload token fired. Checking for changes...","Properties":{"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}}
{"Timestamp":"2025-04-03T00:46:51.9849345+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:46:51.9852604+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:46:52.2410667+07:00","Level":"Debug","MessageTemplate":"Middleware configuration started with options: {Options}","Properties":{"Options":"{AllowedHosts = *, AllowEmptyHosts = True, IncludeFailureMessage = True}","EventId":{"Id":7,"Name":"MiddlewareConfigurationStarted"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:46:52.2412478+07:00","Level":"Debug","MessageTemplate":"Wildcard detected, all requests with hosts will be allowed.","Properties":{"EventId":{"Name":"WildcardDetected"},"SourceContext":"Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware"}}
{"Timestamp":"2025-04-03T00:46:52.2414868+07:00","Level":"Debug","MessageTemplate":"Config reload token fired. Checking for changes...","Properties":{"SourceContext":"Microsoft.AspNetCore.Server.Kestrel"}}
